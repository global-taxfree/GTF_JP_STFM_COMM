<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="StringLandingPort01" xml:space="preserve">
    <value>稚内港フェリーターミナル</value>
  </data>
  <data name="StringLandingPort02" xml:space="preserve">
    <value>神戸ポートターミナル</value>
  </data>
  <data name="StringLandingPort03" xml:space="preserve">
    <value>大阪国際フェリーターミナル</value>
  </data>
  <data name="StringLandingPort04" xml:space="preserve">
    <value>下関港国際ターミナル</value>
  </data>
  <data name="StringLandingPort05" xml:space="preserve">
    <value>博多港国際ターミナル</value>
  </data>
  <data name="StringLandingPort06" xml:space="preserve">
    <value>比田勝港国際ターミナル</value>
  </data>
  <data name="StringLandingPort07" xml:space="preserve">
    <value>旭川空港</value>
  </data>
  <data name="StringLandingPort08" xml:space="preserve">
    <value>函館空港</value>
  </data>
  <data name="StringLandingPort09" xml:space="preserve">
    <value>新千歳空港</value>
  </data>
  <data name="StringLandingPort10" xml:space="preserve">
    <value>青森空港</value>
  </data>
  <data name="StringLandingPort11" xml:space="preserve">
    <value>秋田空港</value>
  </data>
  <data name="StringLandingPort12" xml:space="preserve">
    <value>仙台空港</value>
  </data>
  <data name="StringLandingPort13" xml:space="preserve">
    <value>福島空港</value>
  </data>
  <data name="StringLandingPort14" xml:space="preserve">
    <value>茨城空港</value>
  </data>
  <data name="StringLandingPort15" xml:space="preserve">
    <value>成田国際空港</value>
  </data>
  <data name="StringLandingPort16" xml:space="preserve">
    <value>羽田空港</value>
  </data>
  <data name="StringLandingPort17" xml:space="preserve">
    <value>新潟空港</value>
  </data>
  <data name="StringLandingPort18" xml:space="preserve">
    <value>富山空港</value>
  </data>
  <data name="StringLandingPort19" xml:space="preserve">
    <value>小松空港</value>
  </data>
  <data name="StringLandingPort20" xml:space="preserve">
    <value>中部国際空港</value>
  </data>
  <data name="StringLandingPort21" xml:space="preserve">
    <value>富士山静岡空港</value>
  </data>
  <data name="StringLandingPort22" xml:space="preserve">
    <value>大阪国際空港</value>
  </data>
  <data name="StringLandingPort23" xml:space="preserve">
    <value>関西国際空港</value>
  </data>
  <data name="StringLandingPort24" xml:space="preserve">
    <value>米子空港</value>
  </data>
  <data name="StringLandingPort25" xml:space="preserve">
    <value>岡山空港</value>
  </data>
  <data name="StringLandingPort26" xml:space="preserve">
    <value>広島空港</value>
  </data>
  <data name="StringLandingPort27" xml:space="preserve">
    <value>北九州空港</value>
  </data>
  <data name="StringLandingPort28" xml:space="preserve">
    <value>福岡空港</value>
  </data>
  <data name="StringLandingPort29" xml:space="preserve">
    <value>佐賀空港</value>
  </data>
  <data name="StringLandingPort30" xml:space="preserve">
    <value>熊本空港</value>
  </data>
  <data name="StringLandingPort31" xml:space="preserve">
    <value>大分空港</value>
  </data>
  <data name="StringLandingPort32" xml:space="preserve">
    <value>宮崎空港</value>
  </data>
  <data name="StringLandingPort33" xml:space="preserve">
    <value>長崎空港</value>
  </data>
  <data name="StringLandingPort34" xml:space="preserve">
    <value>鹿児島空港</value>
  </data>
  <data name="StringLandingPort35" xml:space="preserve">
    <value>那覇空港</value>
  </data>
</root>